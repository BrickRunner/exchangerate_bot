# bot.py
import os
import asyncio
import aiosqlite
from datetime import datetime, timedelta, date
import aiohttp
from aiogram.exceptions import TelegramBadRequest
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
DB_PATH = os.getenv("DB_PATH", "rates.db")

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN not set in .env")

bot = Bot(BOT_TOKEN)
dp = Dispatcher()

CBR_URL = "https://www.cbr-xml-daily.ru/daily_json.js"

# –°–∏–º–≤–æ–ª—ã –≤–∞–ª—é—Ç (–º–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω—è—Ç—å)
CURRENCY_SYMBOLS = {
    "RUB": "‚ÇΩ", "USD": "$", "EUR": "‚Ç¨", "CNY": "¬•", "GBP": "¬£",
    "JPY": "¬•", "CHF": "‚Ç£", "KZT": "‚Ç∏", "TRY": "‚Ç∫", "INR": "‚Çπ",
    "KRW": "‚Ç©", "AED": "ÿØ.ÿ•", "UZS": "so'm", "BYN": "Br", "PLN": "z≈Ç",
    "CZK": "Kƒç", "SEK": "kr", "NOK": "kr", "DKK": "kr", "HUF": "Ft",
    "BGN": "–ª–≤", "RON": "lei", "BRL": "R$", "MXN": "$", "CAD": "$",
    "AUD": "$", "NZD": "$", "HKD": "$", "SGD": "$", "ZAR": "R"
}

# --- DB init ---
async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        # last_sent_date —Ö—Ä–∞–Ω–∏—Ç ISO-–¥–∞—Ç—É (YYYY-MM-DD), —á—Ç–æ–±—ã –Ω–µ —Å–ª–∞—Ç—å –¥–≤–∞–∂–¥—ã –≤ —Ç–æ—Ç –∂–µ –¥–µ–Ω—å
        await db.execute("""
        CREATE TABLE IF NOT EXISTS user_settings (
            user_id INTEGER PRIMARY KEY,
            currencies TEXT DEFAULT 'USD,EUR',
            notify_time TEXT DEFAULT '09:00',
            days TEXT DEFAULT '1,2,3,4,5',
            timezone INTEGER DEFAULT 3,
            last_sent_date TEXT DEFAULT ''
        );
        """)
        await db.commit()

# –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç tuple –≤ –ø–æ—Ä—è–¥–∫–µ –∫–æ–ª–æ–Ω–æ–∫)
async def get_settings(user_id: int):
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT user_id, currencies, notify_time, days, timezone, last_sent_date FROM user_settings WHERE user_id=?", (user_id,))
        row = await cur.fetchone()
        if not row:
            await db.execute("INSERT INTO user_settings (user_id) VALUES (?)", (user_id,))
            await db.commit()
            return await get_settings(user_id)
        return row

# –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª–µ –∏ –Ω–µ –∑–∞–±—ã—Ç—å commit
async def update_settings(user_id: int, field: str, value: str):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(f"UPDATE user_settings SET {field}=? WHERE user_id=?", (value, user_id))
        await db.commit()

# --- Fetch rates from CBR ---
async def fetch_rates(currencies: list):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict: {'base': 'RUB', 'date': 'DD.MM', 'rates': {CUR: value or None}}"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(CBR_URL, timeout=20) as resp:
                data = await resp.json(content_type=None)
                # –¥–∞—Ç–∞ API –≤ UTC+? ‚Äî –Ω–æ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∑–∂–µ
                date_str = datetime.strptime(data["Date"], "%Y-%m-%dT%H:%M:%S%z").strftime("%d.%m")
                rates = {}
                for c in currencies:
                    v = data["Valute"].get(c)
                    rates[c] = v["Value"] if v else None
                return {"base": "RUB", "date": date_str, "rates": rates}
    except Exception:
        # –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –ø–∞–¥–∞–ª
        now = datetime.utcnow()
        return {"base": "RUB", "date": now.strftime("%d.%m"), "rates": {c: None for c in currencies}}

# --- Format message ---
def format_rates_for_user(base: str, dt: datetime, rates: dict) -> str:
    """
    base: 'RUB'
    dt: datetime object (–ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    rates: dict {CUR: value or None}
    """
    lines = [f"üìä –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–∞ {dt.strftime('%d.%m %H:%M')} (–ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è)", ""]
    base_symbol = CURRENCY_SYMBOLS.get(base, base)
    for c, r in rates.items():
        symbol = CURRENCY_SYMBOLS.get(c, c)
        value = f"{r:.2f}" if (r is not None) else "‚Äî"
        lines.append(f"{c} ({symbol}): {value} {base_symbol}")
    lines.append("")
    return "\n".join(lines)

# --- Keyboards ---
def main_menu():
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç —Å–µ–π—á–∞—Å")],
            [KeyboardButton(text="‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
        ], resize_keyboard=True
    )
    return kb

def settings_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí± –í–∞–ª—é—Ç—ã", callback_data="set_currencies")],
        [InlineKeyboardButton(text="‚è∞ –í—Ä–µ–º—è", callback_data="set_time")],
        [InlineKeyboardButton(text="üìÖ –î–Ω–∏", callback_data="set_days")],
        [InlineKeyboardButton(text="üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å", callback_data="set_timezone")],
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_settings")]
    ])

# Helper: build currencies keyboard with marks according to selected list
def build_currencies_kb(selected: list):
    kb = []
    # —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 3 –≤–∞–ª—é—Ç—ã —á—Ç–æ–±—ã –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –≤—ã–≥–ª—è–¥–µ–ª–æ
    row = []
    cnt = 0
    for c in CURRENCY_SYMBOLS.keys():
        mark = "‚úÖ" if c in selected else "‚ùå"
        row.append(InlineKeyboardButton(text=f"{mark} {c}", callback_data=f"toggle_curr:{c}"))
        cnt += 1
        if cnt % 3 == 0:
            kb.append(row)
            row = []
    if row:
        kb.append(row)
    kb.append([InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_settings")])
    return InlineKeyboardMarkup(inline_keyboard=kb)

# --- Handlers ---
@dp.message(Command("start"))
async def cmd_start(m: types.Message):
    await get_settings(m.from_user.id)  # ensure row exists
    await m.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∫—É—Ä—Å–æ–≤ –ø–æ –¥–∞–Ω–Ω—ã–º –¶–ë –†–§. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

@dp.message(lambda message: message.text == "üìä –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç —Å–µ–π—á–∞—Å")
async def handle_send_now(m: types.Message):
    row = await get_settings(m.from_user.id)
    currencies = [c.strip().upper() for c in (row[1] or "USD,EUR").split(",") if c.strip()]
    tz = int(row[4] or 0)

    res = await fetch_rates(currencies)

    # –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (UTC + tz hours)
    user_now = datetime.utcnow() + timedelta(hours=tz)
    # –∏—Å–ø–æ–ª—å–∑—É–µ–º user_now –∫–∞–∫ datetime –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    text = format_rates_for_user(res.get("base", "RUB"), user_now, res.get("rates", {}))
    await m.answer(text)

@dp.message(lambda message: message.text == "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def handle_settings(m: types.Message):
    await m.answer("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=settings_menu())

# --- Currencies selection ---
@dp.callback_query(lambda c: c.data == "set_currencies")
async def cb_set_currencies(cb: types.CallbackQuery):
    row = await get_settings(cb.from_user.id)
    selected = [c.strip().upper() for c in (row[1] or "USD,EUR").split(",") if c.strip()]
    kb = build_currencies_kb(selected)
    try:
        await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—ã (–Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å):", reply_markup=kb)
    except TelegramBadRequest as e:
        # ignore "message is not modified"
        if "message is not modified" not in str(e):
            raise
    await cb.answer()

@dp.callback_query(lambda c: c.data.startswith("toggle_curr:"))
async def cb_toggle_curr(cb: types.CallbackQuery):
    cur = cb.data.split(":", 1)[1]
    row = await get_settings(cb.from_user.id)
    selected = [c.strip().upper() for c in (row[1] or "USD,EUR").split(",") if c.strip()]
    if cur in selected:
        selected.remove(cur)
    else:
        selected.append(cur)
    # –µ—Å–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ ‚Äî –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Å—Ç–æ—Ç—É, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ñ–æ–ª—Ç
    if selected:
        await update_settings(cb.from_user.id, "currencies", ",".join(selected))
    else:
        await update_settings(cb.from_user.id, "currencies", "")
    # –ø–æ–∫–∞–∑–∞—Ç—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å (–Ω–æ–≤—ã–µ –≥–∞–ª–æ—á–∫–∏)
    await cb_set_currencies(cb)

# --- Time selection ---
@dp.callback_query(lambda c: c.data == "set_time")
async def cb_set_time(cb: types.CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_settings")]])
    try:
        await cb.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (24—á), –Ω–∞–ø—Ä–∏–º–µ—Ä 09:00", reply_markup=kb)
    except TelegramBadRequest:
        pass
    await cb.answer()

@dp.message(lambda m: len(m.text) == 5 and m.text.count(":") == 1 and m.text.replace(":","").isdigit())
async def msg_set_time(m: types.Message):
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
    hh, mm = m.text.split(":")
    try:
        hh_i = int(hh); mm_i = int(mm)
        if not (0 <= hh_i < 24 and 0 <= mm_i < 60):
            raise ValueError
    except Exception:
        await m.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú (00:00 - 23:59).", reply_markup=main_menu())
        return
    await update_settings(m.from_user.id, "notify_time", m.text)
    await m.answer(f"‚úÖ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {m.text}", reply_markup=main_menu())

# --- Days selection ---
@dp.callback_query(lambda c: c.data == "set_days")
async def cb_set_days(cb: types.CallbackQuery):
    row = await get_settings(cb.from_user.id)
    selected = [d for d in (row[3] or "1,2,3,4,5").split(",") if d.strip()]
    days_map = {1: "–ü–Ω", 2: "–í—Ç", 3: "–°—Ä", 4: "–ß—Ç", 5: "–ü—Ç", 6: "–°–±", 7: "–í—Å"}
    kb = []
    # –ø–æ 4 –≤ —Å—Ç—Ä–æ–∫–µ
    row_buttons = []
    cnt = 0
    for i in range(1, 8):
        mark = "‚úÖ" if str(i) in selected else "‚ùå"
        row_buttons.append(InlineKeyboardButton(text=f"{mark} {days_map[i]}", callback_data=f"toggle_day:{i}"))
        cnt += 1
        if cnt % 3 == 0:
            kb.append(row_buttons)
            row_buttons = []
    if row_buttons:
        kb.append(row_buttons)
    kb.append([InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_settings")])
    try:
        await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ (–Ω–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å):", reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))
    except TelegramBadRequest:
        pass
    await cb.answer()

@dp.callback_query(lambda c: c.data.startswith("toggle_day:"))
async def cb_toggle_day(cb: types.CallbackQuery):
    day = cb.data.split(":", 1)[1]
    row = await get_settings(cb.from_user.id)
    selected = [d for d in (row[3] or "1,2,3,4,5").split(",") if d.strip()]
    if day in selected:
        selected.remove(day)
    else:
        selected.append(day)
    # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏
    selected_sorted = sorted(set(int(x) for x in selected)) if selected else []
    selected_str = ",".join(str(x) for x in selected_sorted)
    if selected_str == "":
        selected_str = ""
    await update_settings(cb.from_user.id, "days", selected_str)
    await cb_set_days(cb)

# --- Timezone selection ---
@dp.callback_query(lambda c: c.data == "set_timezone")
async def cb_set_timezone(cb: types.CallbackQuery):
    kb_rows = []
    row = []
    cnt = 0
    for tz in range(-12, 13):
        row.append(InlineKeyboardButton(text=f"GMT{tz:+}", callback_data=f"set_tz:{tz}"))
        cnt += 1
        if cnt % 4 == 0:
            kb_rows.append(row); row = []
    if row: kb_rows.append(row)
    kb_rows.append([InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_settings")])
    try:
        await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (UTC offset):", reply_markup=InlineKeyboardMarkup(inline_keyboard=kb_rows))
    except TelegramBadRequest:
        pass
    await cb.answer()

@dp.callback_query(lambda c: c.data.startswith("set_tz:"))
async def cb_set_tz(cb: types.CallbackQuery):
    tz = int(cb.data.split(":", 1)[1])
    await update_settings(cb.from_user.id, "timezone", str(tz))
    # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (—Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π)
    try:
        await cb.answer(f"üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: GMT{tz:+}")
    except Exception:
        pass
    await cb.message.edit_text("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=settings_menu())

# --- Back button ---
@dp.callback_query(lambda c: c.data == "back_settings")
async def cb_back(cb: types.CallbackQuery):
    try:
        await cb.message.edit_text("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=settings_menu())
    except TelegramBadRequest:
        pass
    await cb.answer()

# --- Scheduler loop (–∑–∞–º–µ–Ω—è–µ—Ç aioschedule) ---
async def scheduler_loop():
    """
    –†–∞–∑ –≤ 30 —Å–µ–∫—É–Ω–¥ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö —Å–µ–π—á–∞—Å –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
    —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º notify_time –∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –≤–∫–ª—é—á—ë–Ω, –∏ –µ—Å–ª–∏ –¥–ª—è –Ω–∏—Ö
    –µ—â—ë —Å–µ–≥–æ–¥–Ω—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º.
    """
    while True:
        try:
            async with aiosqlite.connect(DB_PATH) as db:
                cur = await db.execute("SELECT user_id, currencies, notify_time, days, timezone, last_sent_date FROM user_settings")
                rows = await cur.fetchall()
                for row in rows:
                    user_id, currencies, notify_time, days, tz, last_sent = row
                    if not notify_time:
                        continue
                    # parse
                    try:
                        hh, mm = map(int, notify_time.split(":"))
                    except Exception:
                        continue
                    tz = int(tz or 0)
                    # –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_now = datetime.utcnow() + timedelta(hours=tz)
                    # —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã
                    if user_now.hour == hh and user_now.minute == mm:
                        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
                        daynum = user_now.isoweekday()  # 1..7
                        allowed_days = [int(d) for d in (days or "").split(",") if d.strip().isdigit()] or [1,2,3,4,5]
                        if daynum in allowed_days:
                            today_iso = (user_now.date()).isoformat()
                            if last_sent == today_iso:
                                # —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Å–µ–≥–æ–¥–Ω—è
                                continue
                            # –≥–æ—Ç–æ–≤–∏–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
                            currs = [c.strip().upper() for c in (currencies or "USD,EUR").split(",") if c.strip()]
                            res = await fetch_rates(currs)
                            # –∏—Å–ø–æ–ª—å–∑—É–µ–º user_now –∫–∞–∫ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤—ã–≤–æ–¥–∞
                            text = format_rates_for_user(res.get("base","RUB"), user_now, res.get("rates", {}))
                            try:
                                await bot.send_message(user_id, text)
                            except Exception:
                                # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –∑–∞–ø—Ä–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–µ –ª–æ–º–∞–µ–º —Ü–∏–∫–ª
                                pass
                            # –ø–æ–º–µ—Ç–∏–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è
                            await db.execute("UPDATE user_settings SET last_sent_date=? WHERE user_id=?", (today_iso, user_id))
                            await db.commit()
            # —Å–ø–∏–º –Ω–µ–±–æ–ª—å—à–æ–µ –≤—Ä–µ–º—è
            await asyncio.sleep(30)
        except Exception:
            # –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ —É–ø–∞–ª–æ –≤ —Ü–∏–∫–ª–µ, –Ω–µ —É–±–∏–≤–∞–µ–º loop ‚Äî –ø–æ–¥–æ–∂–¥—ë–º –∏ –ø–æ–≤—Ç–æ—Ä–∏–º
            await asyncio.sleep(5)

# --- Run ---
async def main():
    await init_db()
    # –ó–∞–ø—É—Å–∫–∞–µ–º scheduler –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    asyncio.create_task(scheduler_loop())
    # –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
