from aiogram import types
from aiogram.exceptions import TelegramBadRequest

from database import get_settings, update_settings
from keyboards import (
    settings_menu, build_currencies_kb, build_days_kb, 
    build_timezone_kb, main_menu
)


async def handle_settings(m: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    await m.answer("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=settings_menu())


async def cb_set_currencies(cb: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"""
    row = await get_settings(cb.from_user.id)
    selected = [c.strip().upper() for c in (row[1] or "USD,EUR").split(",") if c.strip()]
    kb = await build_currencies_kb(selected)
    try:
        await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—ã (–Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å):", reply_markup=kb)
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            raise
    await cb.answer()


async def cb_toggle_curr(cb: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã"""
    cur = cb.data.split(":", 1)[1]
    row = await get_settings(cb.from_user.id)
    selected = [c.strip().upper() for c in (row[1] or "USD,EUR").split(",") if c.strip()]
    
    if cur in selected:
        selected.remove(cur)
    else:
        selected.append(cur)
    
    if selected:
        await update_settings(cb.from_user.id, "currencies", ",".join(selected))
    else:
        await update_settings(cb.from_user.id, "currencies", "")
    
    await cb_set_currencies(cb)


async def cb_set_time(cb: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    row = await get_settings(cb.from_user.id)
    current_time = row[2] or "08:00"
    kb = settings_menu()
    try:
        await cb.message.edit_text(
            f"‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: <b>{current_time}</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú –∏–ª–∏ –ß:–ú (24—á)\n"
            "–ü—Ä–∏–º–µ—Ä—ã: 09:00, 9:0, 7:30, 23:45",
            reply_markup=kb,
            parse_mode="HTML"
        )
    except TelegramBadRequest:
        pass
    await cb.answer()


async def msg_set_time(m: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –¥–≤–æ–µ—Ç–æ—á–∏—é
        if ":" not in m.text:
            raise ValueError("–ù–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è :")

        parts = m.text.split(":")
        if len(parts) != 2:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π")

        hh, mm = parts
        hh_i = int(hh.strip())
        mm_i = int(mm.strip())

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        if not (0 <= hh_i < 24 and 0 <= mm_i < 60):
            raise ValueError("–í—Ä–µ–º—è –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–∏–¥ –ß–ß:–ú–ú
        formatted_time = f"{hh_i:02d}:{mm_i:02d}"

    except (ValueError, AttributeError) as e:
        await m.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú –∏–ª–∏ –ß:–ú\n"
            "–ü—Ä–∏–º–µ—Ä—ã: 09:00, 9:0, 23:45, 7:30",
            reply_markup=main_menu()
        )
        return

    await update_settings(m.from_user.id, "notify_time", formatted_time)
    await m.answer(
        f"‚úÖ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
        f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: <b>{formatted_time}</b>",
        reply_markup=main_menu(),
        parse_mode="HTML"
    )


async def cb_set_days(cb: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    row = await get_settings(cb.from_user.id)
    selected = [d for d in (row[3] or "1,2,3,4,5").split(",") if d.strip()]
    kb = build_days_kb(selected)
    try:
        await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ (–Ω–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å):", reply_markup=kb)
    except TelegramBadRequest:
        pass
    await cb.answer()


async def cb_toggle_day(cb: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –¥–Ω—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    day = cb.data.split(":", 1)[1]
    row = await get_settings(cb.from_user.id)
    selected = [d for d in (row[3] or "1,2,3,4,5").split(",") if d.strip()]
    
    if day in selected:
        selected.remove(day)
    else:
        selected.append(day)
    
    selected_sorted = sorted(set(int(x) for x in selected)) if selected else []
    selected_str = ",".join(str(x) for x in selected_sorted)
    if selected_str == "":
        selected_str = ""
    
    await update_settings(cb.from_user.id, "days", selected_str)
    await cb_set_days(cb)


async def cb_set_timezone(cb: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
    row = await get_settings(cb.from_user.id)
    current_tz = row[4] or "3"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é UTC+3
    kb = build_timezone_kb()
    try:
        tz_display = f"UTC{int(current_tz):+d}" if int(current_tz) != 0 else "UTC+0"
        await cb.message.edit_text(
            f"üåç –¢–µ–∫—É—â–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: <b>{tz_display}</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:",
            reply_markup=kb,
            parse_mode="HTML"
        )
    except TelegramBadRequest:
        pass
    await cb.answer()


async def cb_set_tz(cb: types.CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
    tz = int(cb.data.split(":", 1)[1])
    await update_settings(cb.from_user.id, "timezone", str(tz))
    try:
        tz_display = f"UTC{tz:+d}" if tz != 0 else "UTC+0"
        await cb.answer(f"üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {tz_display}")
    except Exception:
        pass
    await cb.message.edit_text("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=settings_menu())


async def cb_back(cb: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        await cb.message.edit_text("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=settings_menu())
    except TelegramBadRequest:
        pass
    await cb.answer()