import io
from datetime import date, timedelta
import matplotlib.pyplot as plt
from aiogram import types
from aiogram.exceptions import TelegramBadRequest
from aiogram.types.input_file import BufferedInputFile
import aiohttp

from database import get_settings
from api import fetch_historical_data
from keyboards import build_stats_currencies_kb, build_stats_period_kb, main_menu


async def handle_stats(m: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    row = await get_settings(m.from_user.id)
    if not row or not row[1]:
        await m.answer("‚ùå –£ –≤–∞—Å –Ω–µ –≤—ã–±—Ä–∞–Ω—ã –≤–∞–ª—é—Ç—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.", reply_markup=main_menu())
        return
    
    currencies = [c.strip() for c in row[1].split(",") if c.strip()]
    if not currencies:
        await m.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", reply_markup=main_menu())
        return
    
    kb = build_stats_currencies_kb(currencies)
    await m.answer("üìä –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=kb)


async def cb_stats(cb: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    await handle_stats_for_callback(cb)


async def handle_stats_for_callback(cb: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    row = await get_settings(cb.from_user.id)
    if not row or not row[1]:
        await cb.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ –≤—ã–±—Ä–∞–Ω—ã –≤–∞–ª—é—Ç—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.", reply_markup=main_menu())
        try:
            await cb.answer()
        except TelegramBadRequest:
            pass
        return
    
    currencies = [c.strip() for c in row[1].split(",") if c.strip()]
    if not currencies:
        await cb.message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", reply_markup=main_menu())
        try:
            await cb.answer()
        except TelegramBadRequest:
            pass
        return
    
    kb = build_stats_currencies_kb(currencies)
    try:
        await cb.message.edit_text("üìä –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=kb)
    except TelegramBadRequest:
        await cb.message.answer("üìä –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=kb)
    try:
        await cb.answer()
    except TelegramBadRequest:
        pass


async def cb_stats_period(cb: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    currency = cb.data.split(":", 1)[1].strip()
    kb = build_stats_period_kb(currency)
    try:
        await cb.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è {currency}:", reply_markup=kb)
    except TelegramBadRequest:
        await cb.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è {currency}:", reply_markup=kb)
    await cb.answer()


async def cb_show_graph(cb: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    parts = cb.data.split(":")
    if len(parts) != 3:
        try:
            await cb.answer("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–∞.", show_alert=True)
        except TelegramBadRequest:
            await cb.message.answer("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–∞.")
        return
    
    _, currency, days_str = parts
    try:
        days = int(days_str)
    except ValueError:
        try:
            await cb.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥.", show_alert=True)
        except TelegramBadRequest:
            await cb.message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
        return
    
    if days not in [7, 30, 365]:
        try:
            await cb.answer("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ 7, 30 –∏–ª–∏ 365 –¥–Ω–µ–π.", show_alert=True)
        except TelegramBadRequest:
            await cb.message.answer("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ 7, 30 –∏–ª–∏ 365 –¥–Ω–µ–π.")
        return
    
    end_date = date.today()
    start_date = end_date - timedelta(days=days - 1)
    
    try:
        await cb.answer("‚è≥ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ...")
    except TelegramBadRequest:
        await cb.message.answer("‚è≥ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ...")
    
    await cb.message.answer("üìà –ì—Ä–∞—Ñ–∏–∫ —Å—Ç—Ä–æ–∏—Ç—Å—è, –æ–∂–∏–¥–∞–π—Ç–µ...")
    
    try:
        data = await fetch_historical_data(currency, start_date, end_date)
        
        if not data:
            await cb.message.answer(
                f"‚ùå –î–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è {currency} –Ω–µ—Ç (–≤–æ–∑–º–æ–∂–Ω–æ, –≤—ã—Ö–æ–¥–Ω—ã–µ/–ø—Ä–∞–∑–¥–Ω–∏–∫–∏).",
                reply_markup=main_menu()
            )
            return
        
        data.sort(key=lambda x: x[0])
        dates, values = zip(*data)
        
        fig, ax = plt.subplots(figsize=(10, 5))
        ax.plot(dates, values, marker="o", linewidth=2, markersize=4)
        ax.set_title(
            f"–ö—É—Ä—Å {currency} –∫ RUB –∑–∞ {days} –¥–Ω–µ–π\n"
            f"(–î–∞–Ω–Ω—ã–µ –¶–ë –†–§, {start_date.strftime('%d.%m.%Y')} ‚Äî {end_date.strftime('%d.%m.%Y')})",
            fontsize=12
        )
        ax.set_xlabel("–î–∞—Ç–∞")
        ax.set_ylabel("RUB")
        ax.grid(True, linestyle="--", alpha=0.6)
        ax.tick_params(axis='x', rotation=45)
        plt.tight_layout(pad=1.0)
        
        buf = io.BytesIO()
        plt.savefig(buf, format="png", dpi=150, bbox_inches='tight')
        buf.seek(0)
        photo = BufferedInputFile(buf.getvalue(), filename="graph.png")
        plt.close(fig)
        
        caption = f"üìä –î–∏–Ω–∞–º–∏–∫–∞ –∫—É—Ä—Å–∞ {currency} –∑–∞ {days} –¥–Ω–µ–π.\n–¢–æ—á–∫–∏ ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è."
        await cb.message.answer_photo(photo=photo, caption=caption, reply_markup=main_menu())
        await cb.message.answer("‚úÖ –ì—Ä–∞—Ñ–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        
    except ValueError as e:
        await cb.message.answer(f"‚ö†Ô∏è {str(e)}", reply_markup=main_menu())
    except aiohttp.ClientError as e:
        await cb.message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}", reply_markup=main_menu())
    except Exception as e:
        await cb.message.answer(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ: {str(e)}", reply_markup=main_menu())
    finally:
        try:
            await handle_stats_for_callback(cb)
        except TelegramBadRequest:
            pass