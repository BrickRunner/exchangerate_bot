from aiogram import types
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from database import get_user_thresholds, add_threshold, delete_threshold
from api import fetch_rates
from utils import calc_percent
from keyboards import thresholds_menu, build_threshold_currency_kb, main_menu
from states import InlineThresholdForm


async def handle_thresholds(m: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
    rows = await get_user_thresholds(m.from_user.id)
    thresholds = [(r[1], r[2], r[3], r[0]) for r in rows]
    codes = [t[0] for t in thresholds]
    res_all = await fetch_rates(codes) if codes else {"rates": {}}
    
    text = "üìâ –í–∞—à–∏ –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n\n"
    if not thresholds:
        text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π."
    else:
        for currency, value, comment, tid in thresholds:
            curr_val = res_all["rates"].get(currency, {}).get("value")
            percent_str = calc_percent(curr_val, value) if curr_val else ""
            comment_str = f" ‚Äî –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}" if comment else ""
            text += f"{currency}: {value:.2f} {percent_str}{comment_str}\n"
    
    text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    await m.answer(text, reply_markup=thresholds_menu())


async def cb_add_threshold(cb: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä–æ–≥–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è"""
    kb = await build_threshold_currency_kb(cb.from_user.id)
    try:
        await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –ø–æ—Ä–æ–≥–∞:", reply_markup=kb)
    except TelegramBadRequest:
        pass
    await state.set_state(InlineThresholdForm.choosing_currency)
    await cb.answer()


async def cb_delete_thresholds(cb: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
    rows = await get_user_thresholds(cb.from_user.id)
    if not rows:
        try:
            await cb.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –ø–æ—Ä–æ–≥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=thresholds_menu())
        except TelegramBadRequest:
            pass
        await cb.answer()
        return
    
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    kb = []
    for tid, currency, value, comment in rows:
        kb.append([InlineKeyboardButton(text=f"{currency} {value:.2f}", callback_data=f"del_thr:{tid}")])
    kb.append([InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_main")])
    
    try:
        await cb.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä–æ–≥, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
        )
    except TelegramBadRequest:
        pass
    await cb.answer()


async def cb_delete_specific_threshold(cb: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞"""
    tid = int(cb.data.split(":", 1)[1])
    result = await delete_threshold(tid, cb.from_user.id)
    
    if not result:
        try:
            await cb.answer("–ü–æ—Ä–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª—ë–Ω.", show_alert=True)
        except Exception:
            pass
        return await cb_delete_thresholds(cb)
    
    currency, value = result
    try:
        await cb.answer(f"–ü–æ—Ä–æ–≥ {currency} {value:.2f} —É–¥–∞–ª—ë–Ω.")
    except Exception:
        pass
    return await cb_delete_thresholds(cb)


async def cb_threshold_currency(cb: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã –¥–ª—è –ø–æ—Ä–æ–≥–∞"""
    cur = cb.data.split(":", 1)[1]
    await state.update_data(currency=cur)
    try:
        await cb.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {cur} (–Ω–∞–ø—Ä–∏–º–µ—Ä 100.50):")
    except TelegramBadRequest:
        pass
    await state.set_state(InlineThresholdForm.entering_value)
    await cb.answer()


async def threshold_value_manual(m: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞"""
    try:
        val = float(m.text.strip().replace(",", "."))
    except ValueError:
        await m.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")
        return
    
    await state.update_data(value=val)
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]], resize_keyboard=True
    )
    await m.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Ä–æ–≥—É (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º), –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ: <b>–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å</b>",
        reply_markup=kb,
        parse_mode="HTML"
    )
    await state.set_state(InlineThresholdForm.entering_comment_manual)


async def threshold_comment_manual(m: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –ø–æ—Ä–æ–≥—É"""
    txt = m.text.strip()
    if txt.lower() in ("/skip", "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "**–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å**"):
        comment = ""
    else:
        comment = txt
    
    data = await state.get_data()
    currency = data.get("currency")
    value = data.get("value")
    
    if not currency or value is None:
        await m.answer("–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è ‚Äî –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞.", reply_markup=main_menu())
        await state.clear()
        return
    
    await add_threshold(m.from_user.id, currency, value, comment)
    
    res = await fetch_rates([currency])
    curr_val = res["rates"].get(currency, {}).get("value")
    percent_str = calc_percent(curr_val, value) if curr_val else ""
    
    await m.answer(
        f"‚úÖ –ü–æ—Ä–æ–≥ {currency} {value} –¥–æ–±–∞–≤–ª–µ–Ω! {percent_str}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment or '–Ω–µ—Ç'}",
        reply_markup=main_menu()
    )
    await state.clear()


async def cb_back_main(cb: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    rows = await get_user_thresholds(cb.from_user.id)
    text = "üìâ –í–∞—à–∏ –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n\n"
    if not rows:
        text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π."
    else:
        for tid, currency, value, comment in rows:
            comment_str = f" ({comment})" if comment else ""
            text += f"{currency}: {value:.2f}{comment_str}\n"
    text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    try:
        await cb.message.edit_text(text, reply_markup=thresholds_menu())
    except TelegramBadRequest:
        pass
    await cb.answer()