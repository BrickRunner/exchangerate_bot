from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from database import get_settings
from api import fetch_all_rates
from datetime import datetime, timedelta
import logging
from typing import List

logger = logging.getLogger(__name__)

# –ö–µ—à –¥–ª—è —Å–ø–∏—Å–∫–∞ –≤–∞–ª—é—Ç
_currency_cache = None
_cache_timestamp = None
CACHE_TTL_SECONDS = 3600  # –ö–µ—à –Ω–∞ 1 —á–∞—Å

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —á–∏—Å–ª–∞ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—É
KEYBOARD_COLUMNS_CURRENCIES = 3
KEYBOARD_COLUMNS_DAYS = 3
KEYBOARD_COLUMNS_TIMEZONE = 4


async def get_all_currencies() -> List[str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –≤–∞–ª—é—Ç —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    global _currency_cache, _cache_timestamp

    now = datetime.utcnow()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–µ—à–∞
    if _currency_cache is not None and _cache_timestamp is not None:
        if (now - _cache_timestamp).total_seconds() < CACHE_TTL_SECONDS:
            logger.debug("Using cached currency list")
            return _currency_cache

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞
    try:
        logger.info("Fetching fresh currency list")
        all_data = await fetch_all_rates()
        _currency_cache = sorted(all_data["rates"].keys())
        _cache_timestamp = now
        return _currency_cache
    except Exception as e:
        logger.error(f"Failed to fetch currency list: {e}", exc_info=True)
        # –ï—Å–ª–∏ –∫–µ—à —É—Å—Ç–∞—Ä–µ–ª, –Ω–æ –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –∫–µ—à
        if _currency_cache is not None:
            logger.warning("Using stale cache due to fetch error")
            return _currency_cache
        raise


def main_menu() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç —Å–µ–π—á–∞—Å")],
            [KeyboardButton(text="üìâ –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")],
            [KeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton(text="‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
        ],
        resize_keyboard=True
    )
    return kb


def settings_menu() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí± –í–∞–ª—é—Ç—ã", callback_data="set_currencies")],
        [InlineKeyboardButton(text="‚è∞ –í—Ä–µ–º—è", callback_data="set_time")],
        [InlineKeyboardButton(text="üìÖ –î–Ω–∏", callback_data="set_days")],
        [InlineKeyboardButton(text="üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å", callback_data="set_timezone")],
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_settings")]
    ])


def thresholds_menu() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Ä–æ–≥", callback_data="add_threshold"),
         InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ—Ä–æ–≥", callback_data="del_thresholds")],
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_main")]
    ])


async def build_currencies_kb(selected: List[str]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    kb = []
    row = []
    cnt = 0

    try:
        all_codes = await get_all_currencies()
    except Exception as e:
        logger.error(f"Failed to build currencies keyboard: {e}")
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_settings")]
        ])

    for c in all_codes:
        mark = "‚úÖ" if c in selected else "‚ùå"
        row.append(InlineKeyboardButton(text=f"{mark} {c}", callback_data=f"toggle_curr:{c}"))
        cnt += 1
        if cnt % KEYBOARD_COLUMNS_CURRENCIES == 0:
            kb.append(row)
            row = []

    if row:
        kb.append(row)

    kb.append([InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_settings")])
    return InlineKeyboardMarkup(inline_keyboard=kb)


async def build_threshold_currency_kb(user_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã –ø–æ—Ä–æ–≥–∞"""
    try:
        row = await get_settings(user_id)
        selected_currencies = [c.strip().upper() for c in (row[1] or "USD,EUR").split(",") if c.strip()]
        kb = []
        row_buttons = []

        for idx, c in enumerate(selected_currencies, 1):
            row_buttons.append(InlineKeyboardButton(text=c, callback_data=f"th_curr:{c}"))
            if idx % KEYBOARD_COLUMNS_CURRENCIES == 0:
                kb.append(row_buttons)
                row_buttons = []

        if row_buttons:
            kb.append(row_buttons)

        kb.append([InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_main")])
        return InlineKeyboardMarkup(inline_keyboard=kb)
    except Exception as e:
        logger.error(f"Failed to build threshold currency keyboard for user {user_id}: {e}")
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_main")]
        ])


def build_days_kb(selected: List[str]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π"""
    days_map = {1: "–ü–Ω", 2: "–í—Ç", 3: "–°—Ä", 4: "–ß—Ç", 5: "–ü—Ç", 6: "–°–±", 7: "–í—Å"}
    kb = []
    row_buttons = []
    cnt = 0

    for i in range(1, 8):
        mark = "‚úÖ" if str(i) in selected else "‚ùå"
        row_buttons.append(InlineKeyboardButton(text=f"{mark} {days_map[i]}", callback_data=f"toggle_day:{i}"))
        cnt += 1
        if cnt % KEYBOARD_COLUMNS_DAYS == 0:
            kb.append(row_buttons)
            row_buttons = []

    if row_buttons:
        kb.append(row_buttons)

    kb.append([InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_settings")])
    return InlineKeyboardMarkup(inline_keyboard=kb)


def build_timezone_kb() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ (UTC)"""
    kb_rows = []
    row = []
    cnt = 0

    for tz in range(-12, 13):
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: UTC+3, UTC-5, UTC+0
        if tz == 0:
            text = "UTC+0"
        else:
            text = f"UTC{tz:+d}"
        row.append(InlineKeyboardButton(text=text, callback_data=f"set_tz:{tz}"))
        cnt += 1
        if cnt % KEYBOARD_COLUMNS_TIMEZONE == 0:
            kb_rows.append(row)
            row = []

    if row:
        kb_rows.append(row)

    kb_rows.append([InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_settings")])
    return InlineKeyboardMarkup(inline_keyboard=kb_rows)


def build_stats_currencies_kb(currencies: List[str]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=c, callback_data=f"stats_curr:{c}")] for c in currencies
    ] + [[InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_main")]])


def build_stats_period_kb(currency: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –ù–µ–¥–µ–ª—è", callback_data=f"stats_period:{currency}:7")],
        [InlineKeyboardButton(text="üóì –ú–µ—Å—è—Ü", callback_data=f"stats_period:{currency}:30")],
        [InlineKeyboardButton(text="üìÜ –ì–æ–¥", callback_data=f"stats_period:{currency}:365")],
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="stats")]
    ])