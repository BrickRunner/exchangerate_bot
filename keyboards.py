from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from database import get_settings
from api import fetch_all_rates


def main_menu():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç —Å–µ–π—á–∞—Å")],
            [KeyboardButton(text="üìâ –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")],
            [KeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton(text="‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
        ],
        resize_keyboard=True
    )
    return kb


def settings_menu():
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí± –í–∞–ª—é—Ç—ã", callback_data="set_currencies")],
        [InlineKeyboardButton(text="‚è∞ –í—Ä–µ–º—è", callback_data="set_time")],
        [InlineKeyboardButton(text="üìÖ –î–Ω–∏", callback_data="set_days")],
        [InlineKeyboardButton(text="üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å", callback_data="set_timezone")],
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_settings")]
    ])


def thresholds_menu():
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Ä–æ–≥", callback_data="add_threshold"),
         InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ—Ä–æ–≥", callback_data="del_thresholds")],
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_main")]
    ])


async def build_currencies_kb(selected: list):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç"""
    kb = []
    row = []
    cnt = 0
    all_data = await fetch_all_rates()
    all_codes = sorted(all_data["rates"].keys())
    
    for c in all_codes:
        mark = "‚úÖ" if c in selected else "‚ùå"
        row.append(InlineKeyboardButton(text=f"{mark} {c}", callback_data=f"toggle_curr:{c}"))
        cnt += 1
        if cnt % 3 == 0:
            kb.append(row)
            row = []
    
    if row:
        kb.append(row)
    
    kb.append([InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_settings")])
    return InlineKeyboardMarkup(inline_keyboard=kb)


async def build_threshold_currency_kb(user_id: int):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã –ø–æ—Ä–æ–≥–∞"""
    row = await get_settings(user_id)
    selected_currencies = [c.strip().upper() for c in (row[1] or "USD,EUR").split(",") if c.strip()]
    kb = []
    row_buttons = []
    
    for idx, c in enumerate(selected_currencies, 1):
        row_buttons.append(InlineKeyboardButton(text=c, callback_data=f"th_curr:{c}"))
        if idx % 3 == 0:
            kb.append(row_buttons)
            row_buttons = []
    
    if row_buttons:
        kb.append(row_buttons)
    
    kb.append([InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_main")])
    return InlineKeyboardMarkup(inline_keyboard=kb)


def build_days_kb(selected: list):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π"""
    days_map = {1: "–ü–Ω", 2: "–í—Ç", 3: "–°—Ä", 4: "–ß—Ç", 5: "–ü—Ç", 6: "–°–±", 7: "–í—Å"}
    kb = []
    row_buttons = []
    cnt = 0
    
    for i in range(1, 8):
        mark = "‚úÖ" if str(i) in selected else "‚ùå"
        row_buttons.append(InlineKeyboardButton(text=f"{mark} {days_map[i]}", callback_data=f"toggle_day:{i}"))
        cnt += 1
        if cnt % 3 == 0:
            kb.append(row_buttons)
            row_buttons = []
    
    if row_buttons:
        kb.append(row_buttons)
    
    kb.append([InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_settings")])
    return InlineKeyboardMarkup(inline_keyboard=kb)


def build_timezone_kb():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
    kb_rows = []
    row = []
    cnt = 0
    
    for tz in range(-12, 13):
        row.append(InlineKeyboardButton(text=f"GMT{tz:+}", callback_data=f"set_tz:{tz}"))
        cnt += 1
        if cnt % 4 == 0:
            kb_rows.append(row)
            row = []
    
    if row:
        kb_rows.append(row)
    
    kb_rows.append([InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_settings")])
    return InlineKeyboardMarkup(inline_keyboard=kb_rows)


def build_stats_currencies_kb(currencies: list):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=c, callback_data=f"stats_curr:{c}")] for c in currencies
    ] + [[InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_main")]])


def build_stats_period_kb(currency: str):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –ù–µ–¥–µ–ª—è", callback_data=f"stats_period:{currency}:7")],
        [InlineKeyboardButton(text="üóì –ú–µ—Å—è—Ü", callback_data=f"stats_period:{currency}:30")],
        [InlineKeyboardButton(text="üìÜ –ì–æ–¥", callback_data=f"stats_period:{currency}:365")],
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="stats")]
    ])